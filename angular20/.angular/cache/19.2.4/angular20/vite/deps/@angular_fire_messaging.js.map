{
  "version": 3,
  "sources": ["../../../../../../node_modules/@angular/fire/fesm2022/angular-fire-messaging.mjs"],
  "sourcesContent": ["import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, PLATFORM_ID, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { deleteToken as deleteToken$1, getMessaging as getMessaging$1, getToken as getToken$1, isSupported as isSupported$1, onMessage as onMessage$1 } from 'firebase/messaging';\nexport * from 'firebase/messaging';\nclass Messaging {\n  constructor(messaging) {\n    return messaging;\n  }\n}\nconst MESSAGING_PROVIDER_NAME = 'messaging';\nclass MessagingInstances {\n  constructor() {\n    return _getAllInstancesOf(MESSAGING_PROVIDER_NAME);\n  }\n}\nconst messagingInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(MESSAGING_PROVIDER_NAME))), distinct());\nconst PROVIDED_MESSAGING_INSTANCES = new InjectionToken('angularfire2.messaging-instances');\nfunction defaultMessagingInstanceFactory(provided, defaultApp, platformId) {\n  if (isPlatformServer(platformId)) {\n    return null;\n  }\n  const defaultMessaging = _getDefaultInstanceOf(MESSAGING_PROVIDER_NAME, provided, defaultApp);\n  return defaultMessaging && new Messaging(defaultMessaging);\n}\nfunction messagingInstanceFactory(fn) {\n  return (zone, injector, platformId) => {\n    if (isPlatformServer(platformId)) {\n      return null;\n    }\n    const messaging = zone.runOutsideAngular(() => fn(injector));\n    return new Messaging(messaging);\n  };\n}\nconst MESSAGING_INSTANCES_PROVIDER = {\n  provide: MessagingInstances,\n  deps: [[new Optional(), PROVIDED_MESSAGING_INSTANCES]]\n};\nconst DEFAULT_MESSAGING_INSTANCE_PROVIDER = {\n  provide: Messaging,\n  useFactory: defaultMessagingInstanceFactory,\n  deps: [[new Optional(), PROVIDED_MESSAGING_INSTANCES], FirebaseApp, PLATFORM_ID]\n};\nclass MessagingModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'fcm');\n  }\n  static ɵfac = function MessagingModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MessagingModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MessagingModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MessagingModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideMessaging(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'fcm');\n  return makeEnvironmentProviders([DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER, {\n    provide: PROVIDED_MESSAGING_INSTANCES,\n    useFactory: messagingInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, PLATFORM_ID, _AngularFireSchedulers, FirebaseApps, ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst deleteToken = _zoneWrap(deleteToken$1, true, 2);\nconst getMessaging = _zoneWrap(getMessaging$1, true);\nconst getToken = _zoneWrap(getToken$1, true);\nconst isSupported = _zoneWrap(isSupported$1, false);\nconst onMessage = _zoneWrap(onMessage$1, false);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Messaging, MessagingInstances, MessagingModule, deleteToken, getMessaging, getToken, isSupported, messagingInstance$, onMessage, provideMessaging };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAM,YAAN,MAAgB;AAAA,EACd,YAAY,WAAW;AACrB,WAAO;AAAA,EACT;AACF;AACA,IAAM,0BAA0B;AAChC,IAAM,qBAAN,MAAyB;AAAA,EACvB,cAAc;AACZ,WAAO,mBAAmB,uBAAuB;AAAA,EACnD;AACF;AACA,IAAM,qBAAqB,MAAM,GAAG,GAAG,EAAE,KAAK,UAAU,MAAM,KAAK,mBAAmB,uBAAuB,CAAC,CAAC,GAAG,SAAS,CAAC;AAC5H,IAAM,+BAA+B,IAAI,eAAe,kCAAkC;AAC1F,SAAS,gCAAgC,UAAU,YAAY,YAAY;AACzE,MAAI,iBAAiB,UAAU,GAAG;AAChC,WAAO;AAAA,EACT;AACA,QAAM,mBAAmB,sBAAsB,yBAAyB,UAAU,UAAU;AAC5F,SAAO,oBAAoB,IAAI,UAAU,gBAAgB;AAC3D;AACA,SAAS,yBAAyB,IAAI;AACpC,SAAO,CAAC,MAAM,UAAU,eAAe;AACrC,QAAI,iBAAiB,UAAU,GAAG;AAChC,aAAO;AAAA,IACT;AACA,UAAM,YAAY,KAAK,kBAAkB,MAAM,GAAG,QAAQ,CAAC;AAC3D,WAAO,IAAI,UAAU,SAAS;AAAA,EAChC;AACF;AACA,IAAM,+BAA+B;AAAA,EACnC,SAAS;AAAA,EACT,MAAM,CAAC,CAAC,IAAI,SAAS,GAAG,4BAA4B,CAAC;AACvD;AACA,IAAM,sCAAsC;AAAA,EAC1C,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,MAAM,CAAC,CAAC,IAAI,SAAS,GAAG,4BAA4B,GAAG,aAAa,WAAW;AACjF;AACA,IAAM,kBAAN,MAAM,iBAAgB;AAAA,EACpB,cAAc;AACZ,oBAAgB,eAAe,QAAQ,MAAM,KAAK;AAAA,EACpD;AAAA,EACA,OAAO,OAAO,SAAS,wBAAwB,mBAAmB;AAChE,WAAO,KAAK,qBAAqB,kBAAiB;AAAA,EACpD;AAAA,EACA,OAAO,OAAyB,iBAAiB;AAAA,IAC/C,MAAM;AAAA,EACR,CAAC;AAAA,EACD,OAAO,OAAyB,iBAAiB;AAAA,IAC/C,WAAW,CAAC,qCAAqC,4BAA4B;AAAA,EAC/E,CAAC;AACH;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,iBAAiB,CAAC;AAAA,IACxF,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,WAAW,CAAC,qCAAqC,4BAA4B;AAAA,IAC/E,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,CAAC,GAAG,IAAI;AACpB,GAAG;AACH,SAAS,iBAAiB,OAAO,MAAM;AACrC,kBAAgB,eAAe,QAAQ,MAAM,KAAK;AAClD,SAAO,yBAAyB,CAAC,qCAAqC,8BAA8B;AAAA,IAClG,SAAS;AAAA,IACT,YAAY,yBAAyB,EAAE;AAAA,IACvC,OAAO;AAAA,IACP,MAAM,CAAC,QAAQ,UAAU,aAAa,wBAAwB,cAAc,GAAG,IAAI;AAAA,EACrF,CAAC,CAAC;AACJ;AAGA,IAAMA,eAAc,UAAU,aAAe,MAAM,CAAC;AACpD,IAAM,eAAe,UAAU,sBAAgB,IAAI;AACnD,IAAMC,YAAW,UAAU,UAAY,IAAI;AAC3C,IAAM,cAAc,UAAU,mBAAe,KAAK;AAClD,IAAMC,aAAY,UAAU,WAAa,KAAK;",
  "names": ["deleteToken", "getToken", "onMessage"]
}
